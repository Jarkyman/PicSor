---
description: 
globs: 
alwaysApply: true
---
You are building PicSor, a Flutter photo management app that helps users sort through their local gallery by swiping.

## Project Purpose
PicSor is an offline-first app for sorting photos and videos stored locally on a users phone. Users swipe left to delete, right to keep, and up to sort later. Deleted items are not immediately removed, but placed in a temporary queue (soft delete) until the user chooses to delete permanently.

The app is monetized using Google AdMob via rewarded ads (to gain extra swipes) and occasional banner cards between photos (e.g., every 10 to 20 items). No backend or cloud storage is used — everything happens locally on device.

### Key Principles
- Write clean, modern Dart code using Flutter.
- Use `provider` for state management.
- Avoid unnecessary complexity and global state.
- Prefer immutable widgets and functional decomposition.
- Use descriptive names like `isSwiping`, `hasReachedLimit`, `deletedPhotosCount`.

### File & Project Structure
Use the following logical structure:
/lib
├── main.dart
├── app.dart
├── models/ # Data classes (e.g. PhotoModel)
├── screens/ # One file per screen: Swipe, Deleted, Stats, Settings, etc.
├── services/ # GalleryService, StorageService, AdService
├── widgets/ # Reusable components (e.g. SwipeCard, ActionButtons)
├── core/ # Constants, styles, enums, extensions

markdown
Kopiér
Rediger

### Flutter & Dart Practices
- Use `const` constructors wherever possible.
- Use trailing commas to improve formatting and diffing.
- Use arrow syntax for one-liners and simple methods.
- Use expression-bodied getters and concise functions.
- Split out widgets logically instead of deep build methods.
- Prefer `StateNotifier` or `ChangeNotifier` (via `provider`) over managing raw state.

### UI Guidelines
- Use consistent theming (light/dark/system).
- Build layouts using `LayoutBuilder` or `MediaQuery` for responsiveness.
- Use `Theme.of(context).textTheme.labelLarge` etc. for text.
- Favor `IconButton`, `TextButton`, and custom `GestureDetector` wrappers over `InkWell` where ripple isn't needed.

### Features Summary
- SwipeScreen: swipe photos/videos and apply logic
- Undo history: allow undoing the most recent swipe
- Deleted tab: soft-deleted photos, user can confirm deletion
- Sort later: revisit and finalize items saved for later
- Stats: show GB deleted, % of gallery swiped, GB saved
- Settings: toggles for dark mode, notifications, etc.
- Notifications: every 5h refill + reminder when swipes are low

### Error Handling
- Handle permission errors (photos, notifications)
- Show errors using simple visual cues (e.g. inline messages or banners, no SnackBar spam)
- Validate dates to prevent time cheat (popup block if detected)

### Monetization Rules
- Use AdMob via `google_mobile_ads`
- No fullscreen/pop-up ads
- Show reward ads for extra swipe boosts
- Show banner ad cards between photo swipes (e.g. every 10 to 20 swipes)

### Testing Strategy
- Unit test logic for swipe limits, undo, and local date checks
- Widget test for gesture recognition and UI state changes
- Integration test for full swipe flow, including rewarded ads and limits

### Miscellaneous
- Support both iOS and Android (Photos & Google Photos)
- All data and decisions are local — no backend or cloud required
- All text and UI labels are in English only
- App name: PicSor (short for Picture Sorter)

Refer to Flutter and Provider documentation for best practices.